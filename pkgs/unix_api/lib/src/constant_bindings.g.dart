// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:unix_api/libc_shim')
library;

import 'dart:ffi' as ffi;

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_DT_BLK')
external int get_DT_BLK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_DT_CHR')
external int get_DT_CHR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_DT_DIR')
external int get_DT_DIR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_DT_FIFO')
external int get_DT_FIFO();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_DT_LNK')
external int get_DT_LNK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_DT_REG')
external int get_DT_REG();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_DT_SOCK')
external int get_DT_SOCK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_DT_UNKNOWN')
external int get_DT_UNKNOWN();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_EACCES')
external int get_EACCES();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_EBADF')
external int get_EBADF();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_EDOM')
external int get_EDOM();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_EEXIST')
external int get_EEXIST();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_EINTR')
external int get_EINTR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_EINVAL')
external int get_EINVAL();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_EMFILE')
external int get_EMFILE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_ENOENT')
external int get_ENOENT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_ENOSPC')
external int get_ENOSPC();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_ENOSYS')
external int get_ENOSYS();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_ENOTDIR')
external int get_ENOTDIR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_ENOTEMPTY')
external int get_ENOTEMPTY();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_EPERM')
external int get_EPERM();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_ETIMEDOUT')
external int get_ETIMEDOUT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_AT_FDCWD')
external int get_AT_FDCWD();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_AT_REMOVEDIR')
external int get_AT_REMOVEDIR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_O_APPEND')
external int get_O_APPEND();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_O_CLOEXEC')
external int get_O_CLOEXEC();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_O_CREAT')
external int get_O_CREAT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_O_DIRECTORY')
external int get_O_DIRECTORY();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_O_EXCL')
external int get_O_EXCL();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_O_RDONLY')
external int get_O_RDONLY();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_O_TRUNC')
external int get_O_TRUNC();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_O_WRONLY')
external int get_O_WRONLY();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_PATH_MAX')
external int get_PATH_MAX();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_L_ctermid')
external int get_L_ctermid();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MAP_ANONYMOUS')
external int get_MAP_ANONYMOUS();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MAP_FIXED')
external int get_MAP_FIXED();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MAP_PRIVATE')
external int get_MAP_PRIVATE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MAP_SHARED')
external int get_MAP_SHARED();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MCL_CURRENT')
external int get_MCL_CURRENT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MCL_FUTURE')
external int get_MCL_FUTURE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MS_ASYNC')
external int get_MS_ASYNC();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MS_INVALIDATE')
external int get_MS_INVALIDATE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_MS_SYNC')
external int get_MS_SYNC();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_POSIX_MADV_DONTNEED')
external int get_POSIX_MADV_DONTNEED();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_POSIX_MADV_NORMAL')
external int get_POSIX_MADV_NORMAL();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_POSIX_MADV_RANDOM')
external int get_POSIX_MADV_RANDOM();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_POSIX_MADV_SEQUENTIAL')
external int get_POSIX_MADV_SEQUENTIAL();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_POSIX_MADV_WILLNEED')
external int get_POSIX_MADV_WILLNEED();

@ffi.Native<ffi.Int64 Function()>(
  symbol: 'libc_shim_get_POSIX_TYPED_MEM_ALLOCATE',
)
external int get_POSIX_TYPED_MEM_ALLOCATE();

@ffi.Native<ffi.Int64 Function()>(
  symbol: 'libc_shim_get_POSIX_TYPED_MEM_ALLOCATE_CONTIG',
)
external int get_POSIX_TYPED_MEM_ALLOCATE_CONTIG();

@ffi.Native<ffi.Int64 Function()>(
  symbol: 'libc_shim_get_POSIX_TYPED_MEM_MAP_ALLOCATABLE',
)
external int get_POSIX_TYPED_MEM_MAP_ALLOCATABLE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_PROT_EXEC')
external int get_PROT_EXEC();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_PROT_NONE')
external int get_PROT_NONE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_PROT_READ')
external int get_PROT_READ();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_PROT_WRITE')
external int get_PROT_WRITE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_AT_SYMLINK_NOFOLLOW')
external int get_AT_SYMLINK_NOFOLLOW();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_AT_RESOLVE_BENEATH')
external int get_AT_RESOLVE_BENEATH();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_AT_EMPTY_PATH')
external int get_AT_EMPTY_PATH();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IEXEC')
external int get_S_IEXEC();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFBLK')
external int get_S_IFBLK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFCHR')
external int get_S_IFCHR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFDIR')
external int get_S_IFDIR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFIFO')
external int get_S_IFIFO();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFLNK')
external int get_S_IFLNK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFMT')
external int get_S_IFMT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFREG')
external int get_S_IFREG();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFSOCK')
external int get_S_IFSOCK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IFWHT')
external int get_S_IFWHT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IREAD')
external int get_S_IREAD();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IRGRP')
external int get_S_IRGRP();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IROTH')
external int get_S_IROTH();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IRUSR')
external int get_S_IRUSR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IRWXG')
external int get_S_IRWXG();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IRWXO')
external int get_S_IRWXO();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IRWXU')
external int get_S_IRWXU();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_ISGID')
external int get_S_ISGID();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_ISTXT')
external int get_S_ISTXT();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_ISUID')
external int get_S_ISUID();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_ISVTX')
external int get_S_ISVTX();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IWGRP')
external int get_S_IWGRP();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IWOTH')
external int get_S_IWOTH();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IWRITE')
external int get_S_IWRITE();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IWUSR')
external int get_S_IWUSR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IXGRP')
external int get_S_IXGRP();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IXOTH')
external int get_S_IXOTH();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_S_IXUSR')
external int get_S_IXUSR();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_UF_APPEND')
external int get_UF_APPEND();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_UF_HIDDEN')
external int get_UF_HIDDEN();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_F_OK')
external int get_F_OK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_R_OK')
external int get_R_OK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_W_OK')
external int get_W_OK();

@ffi.Native<ffi.Int64 Function()>(symbol: 'libc_shim_get_X_OK')
external int get_X_OK();

const int libc_shim_UNDEFINED = 5635263260456932693;
